name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Run linting
      run: |
        flake8 backend --max-line-length=120
        black backend --check
        isort backend --check-only
    
    - name: Run security checks
      run: |
        bandit -r backend -f json -o bandit_report.json
        safety check --json
    
    - name: Generate test data
      run: |
        cd tests
        python create_test_models.py
        cd ..
    
    - name: Run unit tests
      run: |
        pytest tests/unit -v --junit-xml=test_results/unit_results.xml --cov=backend --cov-report=xml
    
    - name: Run integration tests
      run: |
        pytest tests/test_api_integration.py -v --junit-xml=test_results/integration_results.xml --cov=backend --cov-report=xml --cov-append
    
    - name: Run security tests
      run: |
        pytest tests/test_security.py -v --junit-xml=test_results/security_results.xml --cov=backend --cov-report=xml --cov-append
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test_results/
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results - Python ${{ matrix.python-version }}
        path: 'test_results/*.xml'
        reporter: java-junit

  aws-integration-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1
    
    - name: Run AWS integration tests
      run: |
        pytest tests/aws/ -v --junit-xml=test_results/aws_results.xml
    
    - name: Upload AWS test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: aws-test-results
        path: test_results/

  load-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Start application
      run: |
        cd backend
        uvicorn app:app --host 0.0.0.0 --port 8000 &
        sleep 10  # Wait for app to start
    
    - name: Run load tests
      run: |
        cd tests/load
        locust --headless \
          --users 50 \
          --spawn-rate 5 \
          --run-time 120s \
          --host http://localhost:8000 \
          --html ../../load_test_report.html \
          --csv ../../load_test
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: |
          load_test_report.html
          load_test_*.csv

  e2e-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8001:8000
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Set up local AWS services
      run: |
        # Configure AWS CLI for local testing
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set region us-east-1
        
        # Create DynamoDB tables
        aws dynamodb create-table \
          --table-name serveml-deployments \
          --attribute-definitions AttributeName=user_id,AttributeType=S AttributeName=deployment_id,AttributeType=S \
          --key-schema AttributeName=user_id,KeyType=HASH AttributeName=deployment_id,KeyType=RANGE \
          --billing-mode PAY_PER_REQUEST \
          --endpoint-url http://localhost:8001
    
    - name: Generate test models
      run: |
        cd tests
        python create_test_models.py
        cd ..
    
    - name: Start application
      env:
        DYNAMODB_ENDPOINT: http://localhost:8001
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
      run: |
        cd backend
        uvicorn app:app --host 0.0.0.0 --port 8000 &
        sleep 10  # Wait for app to start
    
    - name: Run E2E tests
      run: |
        pytest tests/e2e/test_end_to_end.py -v --junit-xml=test_results/e2e_results.xml
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: test_results/